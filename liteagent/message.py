import json
from typing import Literal, Union

from pydantic import BaseModel, Field, JsonValue
from rich.console import Pretty
from rich.markdown import Markdown
from rich.protocol import is_renderable

from rich.syntax import Syntax


class ToolRequest(BaseModel):
    """
    Represents the request of a tool.
    """

    id: str = Field(..., description="A unique identifier for the tool invocation.")
    name: str = Field(..., description="The name of the tool.")
    arguments: dict | list | str = Field(
        ..., description="The arguments of the tool, which can be a dict, list or string."
    )


Role = Literal["user", "assistant", "system", "tool"]


class Message(BaseModel):
    """
    Abstract base class for all message types.
    """
    role: Role
    content: Union[str, BaseModel] = Field(..., description="The content of the message.")

    def pretty(self) -> (str, any):
        """
        Customizes the rendering of the message using rich formatting by matching self.
        """
        match self:
            case ToolMessage(name=name, content=str(content), role=role):
                return f"{role.capitalize()} ({name})", Markdown(content)

            case ToolMessage(name=name, content=content, role=role):
                content = content if is_renderable(content) else Pretty(content)
                # args = ','.join(args.items()) if isinstance(args, dict) else args

                return f"{role.capitalize()} ({name})", content

            case AssistantMessage(role=role, content=str(content)):
                return role.capitalize(), content

            case Message(role=role, content=str(content)):
                return role.capitalize(), Markdown(content, code_theme="ansi-light")

            case Message(role=role, content=ToolRequest(arguments=dict(arguments)) as tool):
                script = arguments.get('script')

                if script:
                    return f"{role.capitalize()} (Python Runner)", Syntax(script, lexer="python",
                                                                          theme="ansi-light")

                return f"{role.capitalize()}", Pretty(tool)

            case Message(role=role, content=ToolRequest(
                arguments=arguments
            ) as tool):
                script = arguments.get('script')

                if script:
                    return f"{role.capitalize()} (Python Runner)", Syntax(script, lexer="python",
                                                                          theme="ansi-light")

                return f"{role.capitalize()}", Pretty(tool)

            case Message(role=role, content=ToolRequest(name=name, arguments=args) as content):
                if 'input' in args and 'script' in args['input']:
                    return f"{role.capitalize()} ({name})", Syntax(
                        args['input']['script'],
                        lexer="python",
                        theme="ansi-light",
                        line_numbers=True
                    )

                call_as_str = f"{name}({json.dumps(args, indent=2)})"
                return f"{role.capitalize()}", Syntax(call_as_str, lexer="scala", theme="ansi-light")

            case Message(role=role, content=ToolRequest(name=name) as content):
                call_as_str = f"{name}({json.dumps(content.arguments, indent=2)})"
                return f"{role.capitalize()}", Syntax(call_as_str, lexer="scala", theme="ansi-light")

            case _:
                if self.content and isinstance(self.content, BaseModel):
                    return self.role.capitalize(), Pretty(self.content.model_dump())
                else:
                    return self.role.capitalize(), Pretty(self.model_dump())


class UserMessage(Message):
    """
    Represents a message from the user.
    """
    role: str = Field("user", description="The role of the message.")
    content: str = Field(..., description="The content of the user's message.")


class AssistantMessage(Message):
    """
    Represents a message from the assistant.
    """
    role: str = Field(default="assistant", description="The role of the message.")
    content: Union[str, ToolRequest, BaseModel] = Field(
        ..., description="The content of the assistant's message, which can be plain text or a tool request."
    )


class SystemMessage(Message):
    """
    Represents a message from the system.
    """
    role: str = Field(default="system", description="The role of the message.")
    content: str = Field(..., description="The content of the system's message.")


class ToolMessage(Message):
    """
    Represents a message generated by a tool.
    """

    role: str = Field(default="tool", description="The role of the message.")
    id: str = Field(..., description="A unique identifier for the tool invocation.")
    name: str = Field(..., description="The name of the tool.")
    content: JsonValue | BaseModel = Field(..., description="The output generated by a tool.")
