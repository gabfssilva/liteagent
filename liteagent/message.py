from typing import Literal, Union, List

from pydantic import BaseModel, Field, JsonValue
from pydantic.json_schema import SkipJsonSchema


class ToolRequest(BaseModel):
    """
    Represents the request of a tool.
    """

    id: str = Field(..., description="A unique identifier for the tool invocation.")
    name: str = Field(..., description="The name of the tool.")
    arguments: dict | list | str = Field(
        ..., description="The arguments of the tool, which can be a dict, list or string."
    )
    origin: SkipJsonSchema[Literal['local', 'model']] = 'model'


Role = Literal["user", "assistant", "system", "tool"]


class ImageURL(BaseModel):
    url: str = Field(..., description="The URL of the image.")


class ImageBase64(BaseModel):
    base64: str = Field(..., description="The base64 of the image.")


ImageContent = ImageURL | ImageBase64
TextContent = str

Content = TextContent | ImageContent | dict | JsonValue | ToolRequest | BaseModel

MessageContent = Content | list[Content]

class AgentParent(BaseModel):
    name: str = Field(..., description="The name of the parent agent.")
    tool_id: str = Field(..., description="The ID of the parent tool.")

class Message(BaseModel):
    """
    Abstract base class for all message types.
    """
    role: Role
    content: MessageContent = Field(..., description="The content of the message.")
    parent: SkipJsonSchema[AgentParent | None] = None

class UserMessage(Message):
    """
    Represents a message from the user.
    """
    role: str = Field(default="user", description="The role of the message.")
    content: MessageContent = Field(..., description="The content of the user's message.")


class AssistantMessage(Message):
    """
    Represents a message from the assistant.
    """
    role: str = Field(default="assistant", description="The role of the message.")
    content: Union[str, ToolRequest, BaseModel] = Field(
        ..., description="The content of the assistant's message, which can be plain text or a tool request."
    )


class SystemMessage(Message):
    """
    Represents a message from the system.
    """
    role: str = Field(default="system", description="The role of the message.")
    content: str = Field(..., description="The content of the system's message.")


class ToolMessage(Message):
    """
    Represents a message generated by a tool.
    """

    role: str = Field(default="tool", description="The role of the message.")
    id: str = Field(..., description="A unique identifier for the tool invocation.")
    name: str = Field(..., description="The name of the tool.")
    content: MessageContent = Field(..., description="The output generated by a tool.")
